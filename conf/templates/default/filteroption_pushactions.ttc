#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1164227458',
        'name' => 'filteroption_pushactions.tt',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    
    
#line 24 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    
    # MACRO
    $stash->set('process_pushactions', sub {
        my $output = '';
        my (%_tt_args, $_tt_params);
        @_tt_args{ 'filteroption', 'option_name', 'menuname', 'dataset_name' } = splice(@_, 0, 4);
        $_tt_params = shift;
        $_tt_params = { } unless ref($_tt_params) eq 'HASH';
        $_tt_params = { %_tt_args, %$_tt_params };
    
        my $stash = $context->localise($_tt_params);
        eval {
#line 22 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['filteroption', 0, 'getAllPushActions', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'pushaction'} = $_tt_value;
#line 1 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    $stash->set('menu2_name', ($stash->get('dataset_name') . "__filter." . $stash->get(['pushaction', 0, 'ref', 0])));
    
#line 15 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    $stash->set(['js_pushactions_of_filtermenu', 0, $stash->get('menuname'), 0, $stash->get('option_name'), 0, $stash->get('menu2_name'), 0], [ ]);
    
#line 21 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['pushaction', 0, 'getAllOptions', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'pa_option'} = $_tt_value;
    
#line 18 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    $output .=  $stash->get(['js_pushactions_of_filtermenu', 0, $stash->get('menuname'), 0, $stash->get('option_name'), 0, $stash->get('menu2_name'), 0, 'push', [ [ $stash->get(['pa_option', 0, 'name', 0]), $stash->get(['pa_option', 0, 'displayName', 0]) ] ]]);
#line 1 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    $stash->set(['js_sessionvalue_of_filtermenu', 0, $stash->get('menu2_name'), 0], ("[* session.param(\"\${param_prefix}" . $stash->get('menu2_name') . "\")  || \"\" *]"));
    
#line 20 "/Users/do2/projects/htgt_mart/server/conf/templates/default/filteroption_pushactions.tt"
    $output .=  $stash->get(['process_pushactions', [ $stash->get('pa_option'), $stash->get('menu2_name'), $stash->get('dataset_name') ]]);;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
        };
        $stash = $context->delocalise();
        die $@ if $@;
        return $output;
    });
    
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
